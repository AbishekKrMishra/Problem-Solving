/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> ans;
    unordered_map<string,int> um;
    string check(TreeNode* root){
        if(!root){
            return "#";
        }
        string s1="",s2="",val=to_string(root->val);
        if(root->left){
            s1=check(root->left);
        }
        if(root->right){
            s2=check(root->right);
        }
        string s=val+"l"+s1+"r"+s2;
        um[s]++;
        if(um[s]==2){
            ans.push_back(root);
        }
        return s;
    }
    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {
        check(root);
        return ans;
    }
};

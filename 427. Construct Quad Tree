/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* construct(vector<vector<int>>& grid) {
        int n=(int)grid.size();
        return dfs(grid,n,0,0);
    }
    Node* dfs(vector<vector<int>> grid,int n,int r,int c){
        if(n==1){
            return new Node(grid[r][c],true);
        }
        n=n/2;
        Node* res= new Node(0,false,dfs(grid,n,r,c),dfs(grid,n,r,c+n),dfs(grid,n,r+n,c),dfs(grid,n,r+n,c+n));
        if(res->topLeft->isLeaf && res->topRight->isLeaf && res->bottomLeft->isLeaf && 
        res->bottomRight->isLeaf && res->topLeft->val == res->topRight->val &&
        res->topLeft->val == res->bottomLeft->val && res->topLeft->val == res->bottomRight->val){
            res->val=res->topLeft->val;
            res->isLeaf=true;
            delete res->topLeft;
            delete res->topRight;
            delete res->bottomLeft;
            delete res->bottomRight;
            res->topLeft=NULL;
            res->topRight=NULL;
            res->bottomLeft=NULL;
            res->bottomRight=NULL;
        }
        return res;
    }
};
